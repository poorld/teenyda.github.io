<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java之webSocket]]></title>
    <url>%2F-%20websocket%E4%B8%8Ejava%2F</url>
    <content type="text"><![CDATA[浏览器端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; * &#123; margin: 0; padding: 0; &#125; .container &#123; width: 320px; height: 450px; border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 10px; margin: auto; &#125; .box &#123; height: 93%; overflow:scroll; &#125; .bottom &#123; height: 7%; border-top: 1px solid rgba(0, 0, 0, 0.1); text-align: center; &#125; .bottom input &#123; text-indent: 5px; &#125; .server , .client &#123; position: relative; width: 90%; height: 30px; background: #FFE4B5; border-radius: 12px; margin: 5px; line-height: 30px; text-indent: 10px; &#125; .client &#123; background: #FFBBFF; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;button onclick=&quot;createConnect()&quot;&gt;连接&lt;/button&gt; &lt;div class=&quot;container&quot;&gt; &lt;!-- 消息框 --&gt; &lt;div class=&quot;box&quot; id=&quot;box&quot;&gt; &lt;/div&gt; &lt;!-- 底部 --&gt; &lt;div class=&quot;bottom&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; id=&quot;msg&quot;&gt; &lt;button onclick=&quot;send()&quot;&gt;发送&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var socket function createConnect()&#123; Connect(); &#125; function Connect()&#123; try&#123; socket = new WebSocket(&quot;ws://localhost:8080/WebSocket/getServer&quot;) &#125; catch(e)&#123; alert(&apos;error&apos;); return; &#125; console.log(&quot;连接成功&quot;) socket.open = sOpen; socket.onerror = sError; socket.onmessage = sMessage; socket.onClose = sClose; &#125; sOpen = () =&gt; console.log(&apos;connect success&apos;); sError = () =&gt; console.log(&apos;connect error&apos;); sMessage = (evt) =&gt; &#123; // 获取box节点 const box = document.getElementById(&quot;box&quot;); console.log(evt); // 获取服务端数据 const data = evt.data; // 新建节点 const p = document.createElement(&quot;p&quot;); const node = document.createTextNode(data); p.appendChild(node); // 添加样式 p.setAttribute(&quot;class&quot;,&quot;server&quot;); // 添加p节点 box.appendChild(p); &#125; sClose = () =&gt; console.log(&apos;connect close&apos;); send = () =&gt; &#123; const box = document.getElementById(&quot;box&quot;); // 获取输入值 const inputMessage = document.getElementById(&quot;msg&quot;).value; console.log(inputMessage) if (socket)&#123; // 发送信息 socket.send(inputMessage); // 新建节点 const p = document.createElement(&quot;p&quot;); const node = document.createTextNode(inputMessage); p.appendChild(node); //添加样式 p.setAttribute(&quot;class&quot;,&quot;client&quot;); box.appendChild(p); document.getElementById(&quot;msg&quot;).value = &quot;&quot;; &#125;else &#123; console.log(&quot;请连接服务器&quot;) &#125; &#125;; Close = () =&gt; socket.close(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import javax.websocket.OnClose;import javax.websocket.OnError;import javax.websocket.OnMessage;import javax.websocket.OnOpen;import javax.websocket.RemoteEndpoint;import javax.websocket.Session;import javax.websocket.server.ServerEndpoint;@ServerEndpoint(value = &quot;/getServer&quot;)public class WebsocketServer &#123; @OnOpen public void onOpen(Session session)&#123; System.out.println(&quot;sessionId=&quot;+session.getId()); final RemoteEndpoint.Basic basic = session.getBasicRemote(); try &#123; basic.sendText(&quot;会话建立成功&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; Thread t1 = new Thread(new Runnable() &#123; @Override public void run() &#123; Thread.currentThread(); try &#123; Thread.sleep(8000); basic.sendText(&quot;what your name?&quot;); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); t1.start(); &#125; /** * 收到客户端消息 * @param session * @param message * @return */ @OnMessage public void onMessage(Session session, String message)&#123; System.out.println(&quot;pathParams:&quot; + session.getPathParameters()); System.out.println(&quot;requestParams:&quot; + session.getRequestParameterMap()); System.out.println(message); // return 接到消息立刻返回 // return &quot;Got you msg !&quot; + message; &#125; /** * 异常时触发 * @param throwable * @param session */ @OnError public void onError(Throwable throwable , Session session)&#123; System.out.println(&quot;pathParams:&quot; + session.getPathParameters()); System.out.println(&quot;requestParams:&quot; + session.getRequestParameterMap()); System.out.println(&quot;onError&quot; + throwable.toString()); &#125; @OnClose public void onClose(Session session)&#123; System.out.println(&quot;pathParams:&quot; + session.getPathParameters()); System.out.println(&quot;requestParams:&quot; + session.getRequestParameterMap()); System.out.println(&quot;onClose&quot;); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java之webSocket]]></title>
    <url>%2F-%20java%E4%B9%8BwebSocket%2F</url>
    <content type="text"><![CDATA[浏览器端：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; * &#123; margin: 0; padding: 0; &#125; .container &#123; width: 320px; height: 450px; border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 10px; margin: auto; &#125; .box &#123; height: 93%; overflow:scroll; &#125; .bottom &#123; height: 7%; border-top: 1px solid rgba(0, 0, 0, 0.1); text-align: center; &#125; .bottom input &#123; text-indent: 5px; &#125; .server , .client &#123; position: relative; width: 90%; height: 30px; background: #FFE4B5; border-radius: 12px; margin: 5px; line-height: 30px; text-indent: 10px; &#125; .client &#123; background: #FFBBFF; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;button onclick=&quot;createConnect()&quot;&gt;连接&lt;/button&gt; &lt;div class=&quot;container&quot;&gt; &lt;!-- 消息框 --&gt; &lt;div class=&quot;box&quot; id=&quot;box&quot;&gt; &lt;/div&gt; &lt;!-- 底部 --&gt; &lt;div class=&quot;bottom&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; id=&quot;msg&quot;&gt; &lt;button onclick=&quot;send()&quot;&gt;发送&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var socket function createConnect()&#123; Connect(); &#125; function Connect()&#123; try&#123; socket = new WebSocket(&quot;ws://localhost:8080/WebSocket/getServer&quot;) &#125; catch(e)&#123; alert(&apos;error&apos;); return; &#125; console.log(&quot;连接成功&quot;) socket.open = sOpen; socket.onerror = sError; socket.onmessage = sMessage; socket.onClose = sClose; &#125; sOpen = () =&gt; console.log(&apos;connect success&apos;); sError = () =&gt; console.log(&apos;connect error&apos;); sMessage = (evt) =&gt; &#123; // 获取box节点 const box = document.getElementById(&quot;box&quot;); console.log(evt); // 获取服务端数据 const data = evt.data; // 新建节点 const p = document.createElement(&quot;p&quot;); const node = document.createTextNode(data); p.appendChild(node); // 添加样式 p.setAttribute(&quot;class&quot;,&quot;server&quot;); // 添加p节点 box.appendChild(p); &#125; sClose = () =&gt; console.log(&apos;connect close&apos;); send = () =&gt; &#123; const box = document.getElementById(&quot;box&quot;); // 获取输入值 const inputMessage = document.getElementById(&quot;msg&quot;).value; console.log(inputMessage) if (socket)&#123; // 发送信息 socket.send(inputMessage); // 新建节点 const p = document.createElement(&quot;p&quot;); const node = document.createTextNode(inputMessage); p.appendChild(node); //添加样式 p.setAttribute(&quot;class&quot;,&quot;client&quot;); box.appendChild(p); document.getElementById(&quot;msg&quot;).value = &quot;&quot;; &#125;else &#123; console.log(&quot;请连接服务器&quot;) &#125; &#125;; Close = () =&gt; socket.close(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import javax.websocket.OnClose;import javax.websocket.OnError;import javax.websocket.OnMessage;import javax.websocket.OnOpen;import javax.websocket.RemoteEndpoint;import javax.websocket.Session;import javax.websocket.server.ServerEndpoint;@ServerEndpoint(value = &quot;/getServer&quot;)public class WebsocketServer &#123; @OnOpen public void onOpen(Session session)&#123; System.out.println(&quot;sessionId=&quot;+session.getId()); final RemoteEndpoint.Basic basic = session.getBasicRemote(); try &#123; basic.sendText(&quot;会话建立成功&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; Thread t1 = new Thread(new Runnable() &#123; @Override public void run() &#123; Thread.currentThread(); try &#123; Thread.sleep(8000); basic.sendText(&quot;what your name?&quot;); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); t1.start(); &#125; /** * 收到客户端消息 * @param session * @param message * @return */ @OnMessage public void onMessage(Session session, String message)&#123; System.out.println(&quot;pathParams:&quot; + session.getPathParameters()); System.out.println(&quot;requestParams:&quot; + session.getRequestParameterMap()); System.out.println(message); // return 接到消息立刻返回 // return &quot;Got you msg !&quot; + message; &#125; /** * 异常时触发 * @param throwable * @param session */ @OnError public void onError(Throwable throwable , Session session)&#123; System.out.println(&quot;pathParams:&quot; + session.getPathParameters()); System.out.println(&quot;requestParams:&quot; + session.getRequestParameterMap()); System.out.println(&quot;onError&quot; + throwable.toString()); &#125; @OnClose public void onClose(Session session)&#123; System.out.println(&quot;pathParams:&quot; + session.getPathParameters()); System.out.println(&quot;requestParams:&quot; + session.getRequestParameterMap()); System.out.println(&quot;onClose&quot;); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js小笔记]]></title>
    <url>%2F-%20vue.js%E5%B0%8F%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[事件对象12345&lt;button @click=&quot;eventFn($event)&quot;&gt;事件对象&lt;/button&gt;eventFn(e)&#123; //打印dom节点 console.log(e);&#125; 获取自定义属性1234&lt;button data-aid=&apos;123&apos; @click=&quot;getAidAttr($event)&quot;&gt;获取自定义属性的值&lt;/button&gt;getAidAttr(e)&#123; console.log(e.srcElement.dataset.aid)&#125; 模块化新建.js文件12345678910111213var storage = &#123; set(key,value)&#123; localStorage.setItem(key,JSON.stringify(value)) &#125;, get(key)&#123; return JSON.parse(localStorage.getItem(key) &#125;, remove(key)&#123; locaStorage.removeItem(key) &#125;&#125;//把storage暴露出去export default storage; 组件 父组件给子组件传值123456789101112/** * 父组件给子组件传值: * 1.父组件调用子组件时 ，绑定动态属性值 &lt;v-header :homeMsg=&quot;msg&quot;&gt;&lt;/v-header&gt; * * 2.在子组件里通过props 接收父组件传过来的数据 props: [&apos;homeMsg&apos;], * * 3.也可以传方法:run=&quot;run&quot; * * 4.把整个组件传过去:home=&quot;this&quot; */ 子组件主动获取父组件的数据和方法 123456this.$parent.数据this.$parent.方法// 如弹出父组件的msg:alert(this.$parent.msg)// 运行父组件的方法this.$parent.homeAlert() 父组件主动获取子组件的数据和方法:123451.调用子组件的时定义一个ref&lt;v-header ref=&quot;header&quot;&gt;&lt;/v-header&gt;//2.在父组件里面通过this.$refs.header.属性this.$refs.header.方法 非父子组件传值12345678910/** * 非父子组件传值 * 1.新建js文件 , 然后引入vue 实例化vue 最后暴露这个实例 export default * * 2.在要广播的地方引入刚才定义的实例 * * 3.通过VueEmit.$emit(&apos;名称&apos;,&apos;数据&apos;) 广播数据 * * 4.在接收数据的地方通过 .$on(&apos;名称&apos;,(data) -&gt; &#123;&#125;)监听数据 */ App组件 |-Home组件 |-New组件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192App组件&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;v-home&gt;&lt;/v-home&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Home from &apos;./components/Home&apos;export default &#123; name: &apos;app&apos;, data () &#123; return &#123; msg: &apos;Welcome to Your Vue.js App&apos; &#125; &#125;, components: &#123; &apos;v-home&apos;: Home &#125;&#125;&lt;/script&gt;Home组件&lt;template&gt; &lt;div&gt; &lt;v-header&gt;&lt;/v-header&gt; &lt;v-news&gt;&lt;/v-news&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Header from &apos;./Header.vue&apos;import News from &apos;./News.vue&apos;export default &#123; data()&#123; return &#123; &#125; &#125;, components: &#123; &apos;v-header&apos;: Header, &apos;v-news&apos;: News &#125;,&#125;&lt;/script&gt;Header组件&lt;template&gt; &lt;div&gt; &lt;h2&gt;我是头部&lt;/h2&gt; &lt;button @click=&quot;sendBroadcast()&quot;&gt;发送广播&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import VueEvent from &apos;../model/VueEvent.js&apos;export default &#123; data()&#123; return &#123; msg: &quot;我是header组件的msg&quot; &#125; &#125;, methods: &#123; sendBroadcast()&#123; VueEvent.$emit(&quot;to-news&quot;,this.msg) &#125; &#125;,&#125;&lt;/script&gt;News组件&lt;template&gt; &lt;div&gt; &lt;h3&gt;我是新闻&lt;/h3&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import VueEvent from &apos;../model/VueEvent.js&apos;export default &#123; data()&#123; return &#123; &#125; &#125;, mounted () &#123; VueEvent.$on(&quot;to-news&quot;, (data) =&gt; &#123; console.log(&quot;我是News组件，正在监听广播&quot;) console.log(data) &#125;) &#125;&#125;&lt;/script&gt;VueEvent.jsimport Vue from &apos;vue&apos;var VueEvent = new Vue();export default VueEvent; 路由12345678910111213141516171819202122232425262728293031323334353637//安装npm install vue-router//引入 vue-routerimport VueRouter from &apos;vue-router&apos;Vue.use(VueRouter)//1.创建组件import Home from &apos;./components/Home.vue&apos;import News from &apos;./components/News.vue&apos;//2.配置路由const routes = [ &#123; path: &apos;/home&apos;,component: Home&#125;, &#123; path: &apos;/news&apos;,component: News&#125;, //重定向(默认首页) &#123; path: &apos;*&apos;, redirect: &apos;/home&apos;&#125; //默认跳转路由]//3.实例化VueRouterconst router = new VueRouter(&#123; routes&#125;)//4.挂载路由new Vue(&#123; el: &apos;#app&apos;, render: h =&gt; h(App), router&#125;)//5. &lt;router-view&gt;&lt;/router-view&gt; 放在App.vue&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;router-link to=&quot;/home&quot;&gt;home&lt;/router-link&gt; &lt;router-link to=&quot;/news&quot;&gt;news&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt; 获取动态路由的值 1234567891011121.this.$router.params 获取动态路由的值//获取问号后面的参数://this.$route.query&lt;router-link to=&quot;/product?pid=123&quot;&gt;产品1&lt;/router-link&gt;//获取路径参数，要配置动态路由&#123; path: &apos;/news/:nid&apos;, component: News &#125;,//获取路径参数//this.$route.params&lt;router-link to=&quot;/news/222&quot;&gt;news&lt;/router-link&gt; 编程式导航 12345&lt;button @click=&quot;goNews()&quot;&gt;通过js转跳到news&lt;/button&gt;goNews()&#123; this.$router.push(&#123;path: &apos;/news&apos;&#125;) &#125;]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu16搭建java+mysql+tomcat环境]]></title>
    <url>%2F-%20ubuntu16%E6%90%AD%E5%BB%BAjava%2Bmysql%2Btomcat%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[###1.先安装mysql12345sudo apt-get install mysql-serversudo apt-get install mysql-clientsudo apt-get install libmysqlclient-dev 查看是否安装成功1sudo netstat -tap | grep mysql ###2.安装java进入oracle下载java,我使用的是jdk-8u161-linux-x64 上传到服务器 或者使用wget下载1wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz?AuthParam=1534991160_9a55c811f03edc31425ef0e48e6b0007 由于多了个后缀，这里重命名一下123root@teenyda:~# cp jdk-8u181-linux-x64.tar.gz?AuthParam=1534991160_9a55c811f03edc31425ef0e48e6b0007 jdk-8u181-linux-x64.tar.gzroot@teenyda:~# lsjdk-8u181-linux-x64.tar.gz jdk-8u181-linux-x64.tar.gz?AuthParam=1534991160_9a55c811f03edc31425ef0e48e6b0007 解压，我放在/opt/jvm/目录下1sudo tar -zxvf jdk-8u65-linux-x64.tar.gz 解压到指定目录可以用:1sudo tar -zxvf jdk-8u65-linux-x64.tar.gz -C /opt/jvm/ 添加环境变量12345sudo vi /etc/profileexport JAVA_HOME=/opt/jvm/jdk1.8.0_65 export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 让配置生效1source /etc/profile 查看java版本1java -version 下载tomcat8.0 上传到服务器，解压 或者wget下载1wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.33/bin/apache-tomcat-8.5.33.tar.gz 我放在/opt/目录下1tar zxvf apache-tomcat-8.5.33.tar.gz -C /opt 进入/opt/tomcat/bin使用命令启动tomcat1sudo ./startup.sh 如果启动时出错:123ubuntu@VM-97-175-ubuntu:/usr/tomcat/apache-tomcat-8.5.27/bin$ sudo ./startup.shNeither the JAVA_HOME nor the JRE_HOME environment variable is definedAt least one of these environment variable is needed to run this program 进入tomcat的bin目录,编辑catalina.sh文件,在正文开头前，加上12export JAVA_HOME=/opt/jvm/jdk1.8.0_65export JRE_HOME=/opt/jvm/jdk1.8.0_65/jre 这里要与你的java所在目录对应 修改端口可以编辑/tomcat/conf/server.xml 打开浏览器输入ip地址，默认8080端口:]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用git提交代码到github]]></title>
    <url>%2F-%20%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E5%88%B0github%2F</url>
    <content type="text"><![CDATA[安装在window上安装git，到Git for Windows下载，一路确认安装完毕 在ubuntu上安装git1sudo apt-get install git 配置用户名1ubuntu@VM-97-175-ubuntu:~$ git config --global user.name &apos;teenyda&apos; 配置邮箱1ubuntu@VM-97-175-ubuntu:~$ git config --global user.email &apos;teenyda@gmail.com&apos; 生成ssh公钥认证所需的公钥和私钥文件1ssh-keygen -C &apos;teenyda@gmail.com&apos; -t rsa 进入生成的目录123cd /home/ubuntu/.sshvi id_rsa.pub:set nonu 复制代码到github 上传代码就上面的 初始化本地仓库 步骤一样了遇到以下问题：1234ubuntu@VM-97-175-ubuntu:~/git/eParking-javaWeb$ git pull origin masterWarning: Permanently added the RSA host key for IP address &apos;13.250.177.223&apos; to the list of known hosts.fatal: Couldn&apos;t find remote ref masterubuntu@VM-97-175-ubuntu:~/git/eParking-javaWeb$ sudi vi /etc/hosts 解决办法：1vi /etc/hosts 在最后添加一行：113.250.177.223 github.com 把代码上传到githtb第一步，先在github上新建一个仓库 第二步，仓库名 创建后的仓库： 在磁盘中新建一个文件夹，把要上传的代码全部放到此文件夹中 打开Git Bash,进入到新建的文件夹 初始化本地仓库…….123456git initgit remote add origin git@github.com:teenyda/weParking-javaWeb.gitgit add .git commit -m &apos;first commit&apos;git push origin mastergit status]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue.js axios post发送数据后端接收不到数据]]></title>
    <url>%2F-%20vue.js%20axios%E4%B9%8Bpost%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[方法一:1234var params = new URLSearchParams();params.append(&apos;key1&apos;, &apos;value1&apos;);params.append(&apos;key2&apos;, &apos;value2&apos;);params.append(&apos;key3&apos;, &apos;value3&apos;); 然后把params传过去，但是兼容性不好 方法二: 使用qs在main.js引入12import qs from &apos;qs&apos;Vue.prototype.$qs = qs 在组件中使用:123456789//create为对象let postData = this.$qs.stringify(this.create)//或者let postData = this.$qs.stringify(&#123; key1: value1, key2: value2, key3: value3&#125;) 然后把postData传过去 测试使用JSON.stringify()不行]]></content>
      <categories>
        <category>vue.js</category>
        <category>axios</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javaWeb跨域问题]]></title>
    <url>%2F-%20javaWeb%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[vue请求错误:Response to preflight request doesn’t pass access control check: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://localhost:9000‘ is therefore not allowed access. The response had HTTP status code 403 解决:使用CORS实现跨域请求Servlet配置:1.新建CORSFilter类，并实现Filter接口123456789101112131415161718192021222324252627282930313233343536373839package com.teenyda.controller;import java.io.IOException;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class CORSFilter implements Filter&#123; @Override public void destroy() &#123;&#125; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws IOException, ServletException &#123; HttpServletResponse response = (HttpServletResponse) servletResponse; HttpServletRequest request = (HttpServletRequest) servletRequest; // 指定允许其他域名访问 response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); // 响应类型 response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, DELETE, OPTIONS, DELETE&quot;); // 响应头设置 response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type, x-requested-with, X-Custom-Header, HaiYi-Access-Token&quot;); if (&quot;OPTIONS&quot;.equals(request.getMethod()))&#123; response.setStatus(200); &#125; chain.doFilter(servletRequest, servletResponse); &#125; @Override public void init(FilterConfig arg0) throws ServletException &#123;&#125;&#125; 2.web.xml配置:123456789&lt;filter&gt; &lt;filter-name&gt;CORSFilter&lt;/filter-name&gt; &lt;filter-class&gt;com.teenyda.controller.CORSFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;CORSFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; SpringMVC配置:新建ProcessInterceptor类，并实现HandlerInterceptor接口1234567891011121314151617181920212223242526272829303132333435363738package com.teenyda.controller;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;public class ProcessInterceptor implements HandlerInterceptor&#123; @Override public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object obj) throws Exception &#123; httpServletResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); httpServletResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type,Content-Length, Authorization, Accept,X-Requested-With&quot;); httpServletResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;); httpServletResponse.setHeader(&quot;X-Powered-By&quot;,&quot;Jetty&quot;); String method = httpServletRequest.getMethod(); if (method.equals(&quot;OPTIONS&quot;))&#123; httpServletResponse.setStatus(200); return false; &#125; System.out.println(method); return true; &#125; @Override public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3) throws Exception &#123; &#125; @Override public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3) throws Exception &#123; &#125;&#125; 配置spring:12345&lt;mvc:interceptors&gt; &lt;bean class=&quot;com.teenyda.controller.ProcessInterceptor&quot;&gt;&lt;/bean&gt;&lt;/mvc:interceptors&gt;&lt;bean class=&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;/&gt;]]></content>
      <categories>
        <category>javaWeb</category>
        <category>跨域</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android对话框]]></title>
    <url>%2F-%20android-dialog%2F</url>
    <content type="text"><![CDATA[演示： 显示一个简单的对话框:1234567891011121314151617181920builder = new AlertDialog.Builder(this);builder.setIcon(R.drawable.icon);builder.setTitle(&quot;提示&quot;);builder.setMessage(&quot;这是一个简单的提示框&quot;);builder.setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; Toast.makeText(getApplicationContext(), R.string.toast_postive, Toast.LENGTH_SHORT).show(); &#125;&#125;);builder.setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; Toast.makeText(getApplicationContext(), R.string.toast_negative, Toast.LENGTH_SHORT).show(); &#125;&#125;);//设置对话框可取消builder.setCancelable(true);AlertDialog dialog = builder.create();dialog.show(); 项目地址:android_dialog_Test]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#枚举练习]]></title>
    <url>%2F-%20C%20Sharp%E6%9E%9A%E4%B8%BE%2F</url>
    <content type="text"><![CDATA[C#枚举练习:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace EnumTest&#123; enum Color &#123; red = 1, green = 2, black = 3, white = 4, &#125; class Program &#123; static void Main(string[] args) &#123; getEnumName(typeof(Color), &quot;red&quot;); getEnumValue(typeof(Color), &quot;red&quot;); &#125; /// &lt;summary&gt; /// 传入一个变量获取枚举的名称 /// &lt;/summary&gt; static void getEnumName(Type enumType,string name) &#123; if (foreachEnumHasName(enumType,name)) &#123; //方法1：变量获取枚举的名称 Object obj = Enum.Parse(enumType, name); Console.WriteLine(&quot;枚举名称=&quot; + obj); Console.ReadKey(); &#125; else &#123; Console.WriteLine(&quot;字符串&#123;0&#125; 无效&quot;, name); &#125; &#125; /// &lt;summary&gt; /// 传入一个变量获取枚举的值 /// &lt;/summary&gt; /// &lt;param name=&quot;enumStr&quot;&gt;&lt;/param&gt; static void getEnumValue(Type enumType,string enumStr) &#123; if (foreachEnumHasName(enumType, enumStr)) &#123; Color color = (Color)Enum.Parse(enumType, enumStr); //方法1: 获取枚举的值 int colorValue1 = (int)color; Console.WriteLine(colorValue1); //方法2：获取枚举的值 int colorValue2 = Convert.ToInt32(color); Console.WriteLine(colorValue2); Console.ReadKey(); &#125; else &#123; Console.WriteLine(&quot;字符串&#123;0&#125; 无效&quot;, enumStr); Console.ReadKey(); return; &#125; &#125; /// &lt;summary&gt; /// 遍历枚举 /// &lt;/summary&gt; static bool foreachEnumHasName(Type enumType,string name) &#123; foreach (string enumName in Enum.GetNames(enumType)) &#123; if (name.Equals(enumName)) &#123; return true; &#125; &#125; return false; &#125; &#125;&#125;]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis之使用传递多个参数]]></title>
    <url>%2F-%20mybatis%E4%B9%8B%E4%BC%A0%E9%80%92%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[12345678create TABLE user(id int not null auto_increment,username VARCHAR(20),password VARCHAR(20),PRIMARY KEY(id))ENGINE=INNODB auto_increment=0 DEFAULT charset=utf8;insert into user(username,password) values(&apos;teenyda&apos;,&apos;123456&apos;); User类：1234567891011121314151617181920212223242526272829303132333435363738package com.teenyda.domain;public class User &#123; private int id; private String username; private String password; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; @Override public String toString() &#123; return &quot;User [id=&quot; + id + &quot;, username=&quot; + username + &quot;, password=&quot; + password + &quot;]&quot;; &#125; &#125; 编写UserMapper.xml文件123&lt;select id=&quot;selectUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.teenyda.domain.User&quot;&gt; select * from user where id = #&#123;id&#125; &lt;/select&gt; 编写UserMapper类123public interface UserMapper &#123; public User selectUserById(int id);&#125; 开始测试：1234567891011121314151617181920public class UserTest &#123; public SqlSession sqlSession; @Before public void session()&#123; sqlSession = MybatisUtil.getSqlSession(true); &#125; @Test public void test()&#123; UserMapper mapper = sqlSession.getMapper(UserMapper.class); User user = mapper.selectUserById(1); System.out.println(user); &#125; @After public void close()&#123; sqlSession.close(); &#125;&#125; 结果1User [id=1, username=teenyda, password=123456] 当我想验证username和password时，假设sql语句要接收两个参数，我们可以尝试一下是否可以传两个参数过去.UserMapper.xml文件:123&lt;select id=&quot;checkUser&quot; resultType=&quot;com.teenyda.domain.User&quot;&gt; select * from user where username = #&#123;username&#125; and password = #&#123;password&#125;&lt;/select&gt; UserMapper类:12345public interface UserMapper &#123; public User selectUserById(int id); public User checkUser(String username,String password);&#125; 测试类：1234567891011121314151617181920212223242526272829303132package com.teenyda.test;import org.apache.ibatis.session.SqlSession;import org.junit.After;import org.junit.Before;import org.junit.Test;import com.teenyda.domain.User;import com.teenyda.mapping.UserMapper;import com.teenyda.util.MybatisUtil;public class UserTest &#123; public SqlSession sqlSession; @Before public void session()&#123; sqlSession = MybatisUtil.getSqlSession(true); &#125; @Test public void test()&#123; UserMapper mapper = sqlSession.getMapper(UserMapper.class); User user = mapper.checkUser(&quot;teenyda&quot;, &quot;123456&quot;); System.out.println(user); &#125; @After public void close()&#123; sqlSession.close(); &#125;&#125; 结果报错了123456789101112org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: org.apache.ibatis.binding.BindingException: Parameter &apos;username&apos; not found. Available parameters are [0, 1, param1, param2]### Cause: org.apache.ibatis.binding.BindingException: Parameter &apos;username&apos; not found. Available parameters are [0, 1, param1, param2] at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:150) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77) at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75) at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53) at com.sun.proxy.$Proxy6.checkUser(Unknown Source) at com.teenyda.test.UserTest.test2(UserTest.java:48)........... 很不凑巧，大失所望，控制台报错：“Parameter ‘id’ not found. Available parameters are [1, 0, param1, param2]”，说绑定异常，参数ID没有找到，有效的参数是[1, 0, param1, param2]。这是什么意思呢？其实MyBatis在处理多个参数的时候，MyBatis会做特殊处理，多个参数会被封装成一个map，map中是这么存值的1234567map.put(&quot;param1&quot;,&quot;传入的参数值1&quot;);map.put(&quot;param2&quot;,&quot;传入的参数值2&quot;);map.put(&quot;param3&quot;,&quot;传入的参数值3&quot;); . . .map.put(&quot;paramN&quot;,&quot;传入的参数值N&quot;); #{}就是从map中获取指定的key值。 这时候我们修改一下UserMapper.xml123&lt;select id=&quot;checkUser&quot; resultType=&quot;com.teenyda.domain.User&quot;&gt; select * from user where username = #&#123;param1&#125; and password = #&#123;param2&#125;&lt;/select&gt; 再次查询：1User [id=1, username=teenyda, password=123456] 这种写法给人的感觉比较怪怪的，看起来跟我们平时的写法不太一样，按照大家预想where id = #{id} and userName=#{userName} 这种写法方式，是最让人舒服的。为了解决这种方式使用，MyBatis提供了命名参数的方式，在传递参数时，明确指出封装参数时map的key，这样我们在XML中就能使用where id = #{id} and userName=#{userName} 这种写法来传递参数了。 修改UserMapper类1234567public interface UserMapper &#123; public User selectUserById(int id); /*public User checkUser(String username,String password);*/ public User checkUser(@Param(&quot;username&quot;)String username,@Param(&quot;password&quot;)String password);&#125; UserMapper.xml文件：123&lt;select id=&quot;checkUser&quot; resultType=&quot;com.teenyda.domain.User&quot;&gt; select * from user where username = #&#123;username&#125; and password = #&#123;password&#125; &lt;/select&gt; 这样就可以查询出来了！ 转载自：http://www.marsitman.com/mybatis/mybatis-deal-param.htmlhttp://www.marsitman.com/mybatis/mybatis-named-param.html]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis之使用generator.jar 生成代码]]></title>
    <url>%2F-%20mybatis-generator%2F</url>
    <content type="text"><![CDATA[使用到的jar包：mybatis-generator-core-1.3.2.jarmysql-connector-java-5.1.7-bin 在mysql新建一个数据库，名为test1create database test; 创建两个表1234567891011create table user(id int primary key auto_increment,username varchar(20) not null,password varchar(20) not null);create table info(name varchar(20),address varchar(20),phone varchar(11)); 在D盘下新建一个文件夹，名为：generator,并把两个jar包放到目录下，再新建一个名为src的文件夹.新建一个generator.xml文件，如图所示！ 编辑generator文件，根据注释修改123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;!-- 数据库驱动包位置 --&gt; &lt;classPathEntry location=&quot;E:\generator\mysql-connector-java-5.1.7-bin.jar&quot; /&gt; &lt;!-- &lt;classPathEntry location=&quot;C:\oracle\product\10.2.0\db_1\jdbc\lib\ojdbc14.jar&quot; /&gt;--&gt; &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt; &lt;/commentGenerator&gt; &lt;!-- 数据库链接URL、用户名、密码 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/test&quot; userId=&quot;root&quot; password=&quot;1108&quot;&gt; &lt;!--&lt;jdbcConnection driverClass=&quot;oracle.jdbc.driver.OracleDriver&quot; connectionURL=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot; userId=&quot;msa&quot; password=&quot;msa&quot;&gt;--&gt; &lt;/jdbcConnection&gt; &lt;javaTypeResolver&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt; &lt;/javaTypeResolver&gt; &lt;!-- 生成实体类的包名和位置，这里配置将生成的实体类放在me.gacl.domain这个包下 --&gt; &lt;javaModelGenerator targetPackage=&quot;me.teenyda.domain&quot; targetProject=&quot;E:\generator\src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成的SQL映射文件包名和位置，这里配置将生成的SQL映射文件放在me.gacl.mapping这个包下 --&gt; &lt;sqlMapGenerator targetPackage=&quot;me.teenyda.mapping&quot; targetProject=&quot;E:\generator\src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成DAO的包名和位置，这里配置将生成的dao类放在me.gacl.dao这个包下 --&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;me.teenyda.dao&quot; targetProject=&quot;E:\generator\src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 要生成那些表(更改tableName和domainObjectName就可以) --&gt; &lt;!-- domainObjectName的参数一定要大写开头 --&gt; &lt;table tableName=&quot;info&quot; domainObjectName=&quot;Info&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot; /&gt; &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot; /&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 使用cmd命令进入e盘:12E:cd generator 生成代码:1java -jar mybatis-generator-core-1.3.2.jar -configfile generator.xml -overwrite 提示MyBatis Generator finshed successfully.即成功！ 出现如图所示的错误：domainObjectName的参数一定要大写开头 最终的目录如下：]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java之代理模式]]></title>
    <url>%2F-%20java%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法 静态代理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.teenyda.静态代理;public class Demo1 &#123; public static void main(String[] args) &#123; IInsert stu = new StuDao(); IInsert proxy = new InsertProxy(stu); proxy.insert(&quot;insert into p values....&quot;); proxy.update(&quot;update stu set ...&quot;); &#125;&#125;interface IInsert &#123; void insert(String sql); void update(String sql);&#125;class InsertProxy implements IInsert &#123; private IInsert obj; public InsertProxy(IInsert obj) &#123; this.obj = obj; &#125; @Override public void insert(String sql) &#123; System.out.println(&quot;开始执行:&quot;); obj.insert(sql); System.out.println(&quot;执行完毕！&quot;); &#125; @Override public void update(String sql) &#123; System.out.println(&quot;开始执行&quot;); obj.update(sql); System.out.println(&quot;执行完毕！&quot;); &#125;&#125;class StuDao implements IInsert &#123; @Override public void insert(String sql) &#123; System.out.println(sql); &#125; @Override public void update(String sql) &#123; System.out.println(sql); &#125;&#125; 动态代理 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package com.teenyda.动态代理;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class Demo2 &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub ILogin user = new Usre(); InvocationHandler handler = new UserHandler(user); Class&lt;?&gt; clazz = user.getClass(); ILogin u = (ILogin)Proxy.newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), handler); u.login(&quot;张三&quot;); u.killBoss(&quot;张三&quot;); u.update(&quot;张三&quot;); &#125; &#125;//接口interface ILogin&#123; void login(String name); void killBoss(String name); void update(String name);&#125;//被代理类class Usre implements ILogin&#123; @Override public void login(String name) &#123; // TODO Auto-generated method stub System.out.println(name+&quot;登录啦！&quot;); &#125; @Override public void killBoss(String name) &#123; // TODO Auto-generated method stub System.out.println(name+&quot;击杀boss啦！&quot;); &#125; @Override public void update(String name) &#123; // TODO Auto-generated method stub System.out.println(name+&quot;升级啦！&quot;); &#125; &#125;//代理类class UserHandler implements InvocationHandler&#123; private Object obj; public UserHandler(Object obj) &#123; this.obj = obj; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.print(&quot;log：&quot;); method.invoke(obj, args); System.out.println(&quot;正在记录！&quot;); return args; &#125;&#125; 动态代理-之Cglibcloud-cglib.jar 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.teenyda.MethodInterceptor代理;import java.lang.reflect.Method;import net.sf.cglib.proxy.Enhancer;import net.sf.cglib.proxy.MethodInterceptor;import net.sf.cglib.proxy.MethodProxy;/*** @author 作者 E-mail: * @date 创建时间：2018年1月21日 上午9:55:04 * @version 1.0 * @parameter * @since * @return */public class Demo3 &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub ManagerProxy proxy = new ManagerProxy(); Manager m = (Manager)proxy.getProxy(Manager.class); m.root(); ManagerProxy p2 = new ManagerProxy(); Super s = (Super)p2.getProxy(Super.class); s.delete(); &#125;&#125;class Manager&#123; public void root() &#123; System.out.println(&quot;执行root&quot;); &#125;&#125;class Super&#123; public void delete() &#123; System.out.println(&quot;执行删除操作！&quot;); &#125;&#125;class ManagerProxy implements MethodInterceptor&#123; private Enhancer enhancer = new Enhancer(); public Object getProxy(Class&lt;?&gt; clazz) &#123; enhancer.setSuperclass(clazz); enhancer.setCallback(this); return enhancer.create(); &#125; @Override public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable &#123; System.out.println(&quot;截拦！&quot;); proxy.invokeSuper(obj, args); System.out.println(&quot;保存！&quot;); return null; &#125; &#125;]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL之表复制与字段分列]]></title>
    <url>%2F-%20mysql%E4%B9%8B%E8%A1%A8%E5%A4%8D%E5%88%B6%E4%B8%8E%E5%AD%97%E6%AE%B5%E5%88%86%E5%88%97%2F</url>
    <content type="text"><![CDATA[123456#建立一个学生表create table student(id int not null primary key,name varchar(20) not null,address varchar(40) not null); 12345#插入数据，地址要求是：街道名 房号insert into student values(1,&quot;张三&quot;,&quot;广职111 210&quot;);insert into student values(2,&quot;李四&quot;,&quot;广职111 206&quot;);insert into student values(3,&quot;王五&quot;,&quot;广职103 401&quot;);insert into student values(4,&quot;赵六&quot;,&quot;广职202 104&quot;); 12345678910#查询数据select * from student;+----+--------+---------------+| id | name | address |+----+--------+---------------+| 1 | 张三 | 广职111 210 || 2 | 李四 | 广职111 206 || 3 | 王五 | 广职103 401 || 4 | 赵六 | 广职202 104 |+----+--------+---------------+ 知识点：表的复制12345#复制一个与student一样的表，名为stu_infocreate table stu_info select * from student;#如果仅仅需要复制表的结构，可以用create table stu_info LIKE student; 知识点：字段分列，使用的函数：SUBSTRING_INDEX()用法： SUBSTRING_INDEX（需要分列的字段，’间隔符’，间隔符前（为正）/后（为负）的第几个的字符串） 在分割字段前，先新增两个字段，BuildingNumbe(楼房号)和RoomNumber(房号)12alter table stu_info ADD RoomNumber varchar(20) after address;alter table stu_info ADD BuildingNumber varchar(20) after address; 123#此处用 &apos; &apos; 空格做分隔符update stu_info set BuildingNumber = SUBSTRING_INDEX(address,&apos; &apos;,1);update stu_info set RoomNumber = SUBSTRING_INDEX(address,&apos; &apos;,-1); 1234567891011mysql&gt; #查询数据mysql&gt; select * from stu_info;+----+--------+---------------+----------------+------------+| id | name | address | BuildingNumber | RoomNumber |+----+--------+---------------+----------------+------------+| 1 | 张三 | 广职111 210 | 广职111 | 210 || 2 | 李四 | 广职111 206 | 广职111 | 206 || 3 | 王五 | 广职103 401 | 广职103 | 401 || 4 | 赵六 | 广职202 104 | 广职202 | 104 |+----+--------+---------------+----------------+------------+4 rows in set (0.00 sec)]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL存储过程练习]]></title>
    <url>%2F-%20mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[语法：12CREATE PROCEDURE sp_name([proc_paramenter])[characteristices···]routinue_body sp_name 为存储过程名称；proc_paramenter 为参数列表，参数列表形式如下： [IN|OUT|INOUT]param_name type OUT表示输出参数 INOUT表示既可以输入也可以输出 param_name表示参数名称 type表示参数的类型，可以是MySQL数据库中的任意类型 创建一个学生信息表123456create table info(id int primary key auto_increment,name varchar(20) ,grade int ); 插入几条数据123456insert into info(name,grade) values(&apos;张三&apos;,79);insert into info(name,grade) values(&apos;李四&apos;,65);insert into info(name,grade) values(&apos;王五&apos;,17);insert into info(name,grade) values(&apos;贼六&apos;,99);insert into info(name,grade) values(&apos;鬼脚七&apos;,38);insert into info(name,grade) values(&apos;孙八&apos;,54); 创建一个存储过程，用于统计总分，及格人数和不及格人数1234567891011121314151617181920212223242526272829303132333435delimiter $$#第一个参数为分数条件，第二个参数为总分数，第三个参数为及格人数，第四个为不及格人数create procedure pro_lookup(IN condit int, OUT total_score int, OUT pass_number int, OUT no_pass_number int)begin #添加一个变量，用来保存总学生人数DECLARE stu_count int;#定义变量iDECLARE i int ;#定义成绩变量DECLARE s_grade int;#为三个输出参数初始化SET total_score = 0 ;SET pass_number = 0 ;SET no_pass_number = 0 ;SET i = 1 ;#获取学生个数select COUNT(id) into stu_count from info ;WHILE i &lt;= stu_count DO #为s_grade赋值 select grade into s_grade from info where id = i ; #判断s_grade是否大于某个分数 IF s_grade &gt; condit THEN #及格人数+1 SET pass_number = pass_number + 1; ELSE #否则不及格人数+1 SET no_pass_number = no_pass_number + 1 ; END IF ; #总分数 SET total_score = total_score + s_grade ; SET i = i + 1 ;END WHILE ;end ;$$delimiter ; Loading…调用存储过程语法：1CALL sp_name([parameter[,···]) sp_name为存储过程名称，parameter为存储过程的参数。用 @变量名 来接收传出参数。 12#第一个参数，我把及格分设为70CALL pro_lookup(70,@total,@count_pass,@count_Nopass); 查看结果1select @total,@count_pass,@count_Nopass; 为变量名起别名123select @total as 总分,@count_pass as 及格人数,@count_Nopass as 不及格人数;#简写方式select @total 总分,@count_pass 及格人数,@count_Nopass 不及格人数;]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL为表和字段取别名]]></title>
    <url>%2F-%20mysql%E4%B8%BA%E8%A1%A8%E5%92%8C%E5%AD%97%E6%AE%B5%E5%8F%96%E5%88%AB%E5%90%8D%2F</url>
    <content type="text"><![CDATA[在查询数据时，可以为表和字段取别名，这个别名可以取代其指定的表和字段。 为表名取别名格式1SELECT * FROM 表名 [AS] 别名; 1234567mysql&gt; select * from info as i where i.id = 1;+----+--------+-------+| id | name | grade |+----+--------+-------+| 1 | 张三 | 79 |+----+--------+-------+1 row in set (0.00 sec) 为字段取别名格式1SELECT * 字段名 [AS] 别名[,字段名 [AS] 别名,...] FROM 别名; 123456789101112mysql&gt; select id as 序号, name as 姓名, grade as 成绩 from info;+--------+-----------+--------+| 序号 | 姓名 | 成绩 |+--------+-----------+--------+| 1 | 张三 | 79 || 2 | 李四 | 65 || 3 | 王五 | 17 || 4 | 贼六 | 99 || 5 | 鬼脚七 | 38 || 6 | 孙八 | 54 |+--------+-----------+--------+6 rows in set (0.00 sec) 简写方式123456789101112mysql&gt; select id 序号, name 姓名, grade 成绩 from info;+--------+-----------+--------+| 序号 | 姓名 | 成绩 |+--------+-----------+--------+| 1 | 张三 | 79 || 2 | 李四 | 65 || 3 | 王五 | 17 || 4 | 贼六 | 99 || 5 | 鬼脚七 | 38 || 6 | 孙八 | 54 |+--------+-----------+--------+6 rows in set (0.00 sec) 推荐使用 as 关键字，看起来更加规范。]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vps搭建Leanote(蚂蚁笔记)]]></title>
    <url>%2F-%20vps%E6%90%AD%E5%BB%BALeanote(%E8%9A%82%E8%9A%81%E7%AC%94%E8%AE%B0)%2F</url>
    <content type="text"><![CDATA[蚂蚁笔记，有极客范的云笔记！官网：https://leanote.com/ 它最大的特点就是简约、免费、开源、支持 Markdown 语法，支持程序代码高亮、笔记历史记录、支持笔记分享协作、将笔记发布成博客等功能…… 下面是我搭建Leabote的过程！ 1.安装 golang 环境 1wget https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz 解压1tar -zxvf go1.8.linux-amd64.tar.gz 创建gopackage文件夹用于存放golang的程序包1mkdir gopackage 添加golang环境变量1vi /etc/profile 在最底下添加代码：123export GOROOT=/root/goexport GOPATH=/root/gopackageexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin 输入命令使环境生效：1source /etc/profile 输入命令检查 golang 是否安装成功：1go version 若安装成功，则会显示 golang 版本号。 2.获取Revel和 Leanote 的源码输入命令下载 revel Web 框架源码12sudo apt-get install git-core mercurial openssh-server openssh-clientgo get github.com/revel/cmd/revel 获取 Leanote 源码上面已经创建了 gopackage 文件夹用于存放程序源码包，因此我们只需要下载好 revel 和 Leanote 服务端的源码包，然后解压放入 gopackage 文件夹即可。 接上面的步骤，当前处于 /root 目录，进入 gopackage 文件夹：1cd gopackage 下载Leanote服务端源码1wget https://github.com/leanote/leanote-all/archive/master.zip 解压:1unzip master.zip 将解压出来的 leanote-all-master 文件夹内的 src 文件夹移到 gopackage 文件夹内：1mv /root/gopackage/master/src /root/gopackage 3.安装 MongoDB 数据库回到 /root 目录：1cd ~ 下载 MongoDB 数据库源码并解压：12wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgztar -xzvf mongodb-linux-x86_64-3.0.1.tgz 编辑/etc/profile配置文件，添加 MongoDB 数据库的环境变量：1export PATH=$PATH:/root/mongodb-linux-x86_64-3.0.1/bin 路径要正确运行以下命令使环境变量生效:1source /etc/profile 3.1测试Mongodb安装新建一个目录data存放Mongodb数据，（此时路径在/root）:1mkdir data 新建窗口1screen -S mo 启动mongod:1mongod --dbpath /root/data 这时mongod已经启动,Ctrl + a ， 松手， 按键盘 D 键 后台运行 键入mongo进入交互程序：123mongo&gt; show dbs......显示数据库列表 4.导入Leanote初始数据leanote 初始数据在/home/user1/gopackage/src/github.com/leanote/leanote/mongodb_backup/leanote_install_data中。 打开终端， 输入以下命令导入数据。1mongorestore -h localhost -d leanote --dir /root/gopackage/src/github.com/leanote/leanote/mongodb_backup/leanote_install_data 现在在mongodb中已经新建了leanote数据库, 可用命令查看下Leanote有多少张”表”:1234567891011&gt; mongo&gt; show dbsleanote 0.203125GBlocal 0.078125GB&gt; use leanote # 切换到leanoteswitched to db leanote&gt; show collections # 查看表fileshas_share_notesnote_content_historiesnote_contents 5.配置LeanoteLeanote的配置存储在文件 gopackage/src/github.com/leanote/leanote/conf 中。12cd gopackage/src/github.com/leanote/leanote/confvi app.conf 1234567# 访问端口 可以自定义http.port=9000# 访问域名site.url=http://# 管理员用户名（默认用户名admin，密码abc123）# 如果不小心删除数据库的admin用户，下面可以更换管理员账号adminUsername=admin 请务必修改app.secret一项, 在若干个随机位置处，将字符修改成一个其他的值, 否则会有安全隐患! 6.运行Leanote注意: 在此之前请确保Mongodb已在运行! 新开一个窗口1screen -S lea 运行1revel run github.com/leanote/leanote 恭喜你, 打开浏览器输入: http://IP地址:9000 体验Leanote吧 客户端： 网页版： 7.配置https安装nginx1sudo apt-get install nginx 我在leanote的配置（gopackage/src/github.com/leanote/leanote/conf/app.conf）：1234567891011121314151617#------------------------# leanote config#------------------------http.port=9000site.url=http://teenyda.cn # or http://x.com:8080, http://www.xx.com:9000# admin usernameadminUsername=teenyda# mongdbdb.host=127.0.0.1db.port=27017db.dbname=leanote # requireddb.username= # if not exists, please leave it blankdb.password= # if not exists, please leave it blank 我在nginx中的配置：(ubuntu14环境下的 /etc/nginx/sites-available/default)修改前请备份一份原配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647server &#123; listen 80; listen [::]:80 default_server ipv6only=on;# root /usr/share/nginx/html;# index index.html index.htm; # Make site accessible from http://localhost/ server_name teenyda.cn; #强制https，不想这样可以注释或者删除 rewrite ^/(.*) https://teenyda.cn/$1 permanent; location / &#123; proxy_pass http://teenyda.cn; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125;# HTTPS server#server &#123; listen 443; server_name teenyda.cn;## root html;# index index.html index.htm;# ssl on; ssl_certificate /root/teenyda.cn/1_teenyda.cn_bundle.crt; ssl_certificate_key /root/teenyda.cn/2_teenyda.cn.key;## ssl_session_timeout 5m;## ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;# ssl_ciphers &quot;HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES&quot;;# ssl_prefer_server_ciphers on;# location / &#123;# try_files $uri $uri/ =404; proxy_pass http://teenyda.cn:9000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125; 它看起来jx就像这样子，并没有http{ }一个大括号包围着 重启一下nginx1service nginx restart 启动mongod命令1mongod --dbpath /root/data 启动leanote命令1revel run github.com/leanote/leanote 参考教程： 晓岛 Github/leanote Github/leanote-QA]]></content>
      <tags>
        <tag>Leanote</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客常用链接]]></title>
    <url>%2F-%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[服务类七牛云 七牛云是国内领先的企业级云服务商，专注于以数据管理为中心的云计算业务研发和运营，围绕富媒体场景推出了对象存储、融合 CDN 加速、容器计算云、大数据平台、人工智能平台等产品，并提供一站式视频云解决方案。 algolia Algolia是一个强大的托管搜索引擎API，为产品团队提供了创建快速相关搜索所需的资源和工具。 swiftype 搜索引擎 fontawesome Font Awesome 字体为您提供可缩放矢量图标,它可以被定制大小、颜色、阴影以及任何可以用CSS的样式。支持Markdown! vpsraksmart RakSmart数据中心位于美国加州，中国访问速度快，稳定性好，其冗余性能确保了RakSmart国外服务器正常在线时间和快速的访问。 ping值 hostdare 服务器便宜，最低2.99刀，配置不错，而且还可以微信支付 ping值 somagu 一家韩国的服务器！按小时计费，一个月2.59刀]]></content>
      <categories>
        <category>实用技术</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VPS性能测试]]></title>
    <url>%2F-%20vps%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[一、VPS性能测试：CPU物理个数、内核、超线程、多核心1cat /proc/cpuinfo 二、VPS性能测试：内存大小、交换空间、高速缓存、实际使用内存1cat /proc/meminfo 查看占用的内存大小1free -m 计算VPS真实的使用内存方法是：Total-Free-Cached=真实使用内存即： 486-11-214 = 261 表示我的VPS真实使用的内存是261MB 三、VPS性能测试：磁盘IO读写速度、SSD硬盘速度测试12dd if=/dev/zero of=test bs=64k count=4k oflag=dsyncdd if=/dev/zero of=test bs=8k count=256k conv=fdatasync VPS硬盘IO负载测试1top 速度测试1wget https://cachefly.cachefly.net/100mb.test &amp;&amp; rm 100mb.test 测试VPS主机在世界各地的下载速度的一键脚本1wget freevps.us/downloads/bench.sh -O - -o /dev/null | bash 测试VPS主机入口与出口的带宽一键脚本12wget https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.pypython speedtest.py I/O测试1wget -qO- bench.sh | bash 参考链接：免费资源部落]]></content>
      <categories>
        <category>使用技术</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL解决中文乱码问题]]></title>
    <url>%2F-%20mysql%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[有时候在表中插入数据要用到中文，但是在插入数据时遇到了下面这种情况（以test表为例）： 查看test表的结构1show create database test; 改变test表的编码方式:1alter database test default character set utf8 collate utf8_bin; 这时候再次插入数据，发现还是不行，查看一下数据库与操作系统编码1show variables like &apos;%char%&apos;; 我们把character_set_client、character_set_connection、character_set_database、character_set_server都设为utf81234set character_set_client=utf8;set character_set_connection=utf8;set character_set_database=utf8;set character_set_server=utf8; 查看编码 如果原来的表不可以插入中文的话，可以重建一张表； 但是还有一个问题没有解决，就是重新打开数据库时，数据库编码又变回来了。 这时，我们要从根本上解决问题–&gt;修改mysql的配置文件 查看mysql默认读取my.cnf的目录1mysql --help | grep my.cnf 输出如下：ubuntu@localhost:/etc/mysql$ mysql –help | grep my.cnf order of preference, my.cnf, $MYSQL_TCP_PORT,/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf 我们进入到/etc/mysql/目录下，查看my.cnf文件。发现my.cnf的文件是这样的。我们发现，这里面并没有看见相关的配置，瞬间懵逼！因为我们平时看到的是这个样子的 没关系！我们直接修改，插入下面的数据：12345678[mysqld]character-set-server=utf8[client]default-character-set=utf8[mysql]default-character-set=utf8 重启数据库（ubuntu 16）1sudo /etc/init.d/mysql restart ubuntu14执行1service mysql restart 这时候查看编码方式： 大功告成！ 参考：http://blog.csdn.net/u012410733/article/details/61619656]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL相关命令]]></title>
    <url>%2F-%20mysql%2F</url>
    <content type="text"><![CDATA[SQL语句通常可分为如下几种类型。查询语句： 主要由selsct关键字完成，查询语句是SQL语句中最复杂、功能最丰富的语句。DML语句（数据操作语言）： 主要由insert、update和delete三个关键字完成。DDL语句（数据定义语言）： 主要由create、alter、drop和truncate四个关键字完成。DCL语句（数据控制语言）： 主要由grant和revoke两个关键字完成。事务控制语句： 主要由commit、rollback和savepoint三个关键字完成。 MySQL相关命令1.登录命令1mysql -u username -p 2.创建用户1create user &apos;用户名&apos;@&apos;localhost&apos; identified by &apos;密码&apos; 2.1 赋权限1grant all privileges on &apos;数据库名&apos;.* to &apos;用户名&apos;@&apos;localhost&apos; 3.查看数据库的信息1show create database 库名 4.修改数据库编码1alter database 库名 default character SET 编码方式 collate 编码方式_bin 5.删除数据库1drop database 数据库名 6.查看表结构(表的字段信息)1desc 表名 7.修改表名1alter table 旧表名 rename to 新表名 8.修改字段名1alter table 表名 change 旧字段 新字段 新数据类型 9.修改字段类型1alter table 表名 modify 字段名 数据类型 10.添加字段1alter table 表名 add 新字段名 数据类型 [约束条件][FIRST|AFLTER 已存在字段名] 例如1alter table test my_db add age INT 11.删除字段1alter table 表名 drop 字段名 12.删除表名1drop table 表名 13.删除表中所有记录123delect from 表名或者truncate [TABLE] 表名]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器用sendgrid发邮件]]></title>
    <url>%2Fsendgrid%E9%82%AE%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[注册地址：sendgrid 进入仪表盘，点击Setup Guide 把API key复制下来 官方python教程地址Github按照官方教程，我们测试发送一封邮件！ YOUR_API_KEY 就是刚才的api key123echo &quot;export SENDGRID_API_KEY=&apos;YOUR_API_KEY&apos;&quot; &gt; sendgrid.envecho &quot;sendgrid.env&quot; &gt;&gt; .gitignoresource ./sendgrid.env 安装Sendgrid12sudo apt-get python-pipsudo pip install sendgrid 新建一个文件，比如test.py1sudo vi test.py 官方给出的演示如下 我们把它复制到test.py1234567891011121314import sendgridimport osfrom sendgrid.helpers.mail import *sg = sendgrid.SendGridAPIClient(apikey=os.environ.get(&apos;SENDGRID_API_KEY&apos;))from_email = Email(&quot;test@example.com&quot;)to_email = Email(&quot;test@example.com&quot;)subject = &quot;Sending with SendGrid is Fun&quot;content = Content(&quot;text/plain&quot;, &quot;and easy to do anywhere, even with Python&quot;)mail = Mail(from_email, subject, to_email, content)response = sg.client.mail.send.post(request_body=mail.get())print(response.status_code)print(response.body)print(response.headers) 最后 python test.py 发送成功！ 为了防止邮箱被轰炸，所以涂鸦了-_-]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ububtu更换内核（安装锐速）]]></title>
    <url>%2Fubuntu%E6%9B%B4%E6%8D%A2%E5%86%85%E6%A0%B8%2F</url>
    <content type="text"><![CDATA[本篇文章主要是介绍更换内核版本为锐速所支持的版本！ ubuntu更换内核版本为：linux-image-3.03.-24-generic 首先保证你的服务器是64位系统，锐速不支持任何ubuntu14.04的32位系统 1.安装3.13.0-24-generic内核1sudo apt-get install linux-image-extra-3.13.0-24-generic 2.查看当前安装的内核：1dpkg -l | grep linux-image 3.除了3.13.0-24-generic的内核，我们把他们卸载掉12sudo apt-get purge linux-image-3.13.0-121-generic linux-image-3.13.0-128-generic(多个内核用空格隔开)... 可以看到，最后只剩下我们所要的内核 4.更新grub系统引导文件：1sudo update-grub 5.重启1sudo reboot 6.重启之后可以看到，我们用的是3.13.0-24-generic1uname -r 7.安装锐速破解版：12wget -N --no-check-certificate https://raw.githubusercontent.com/wn789/serverspeeder/master/serverspeeder.shbash serverspeeder.sh 安装成功！ 锐速相关命令： 开始：service serverSpeeder start停止：service serverSpeeder stop重新加载配置：service serverSpeeder reload重启：service serverSpeeder restart状态：service serverSpeeder status统计：service serverSpeeder stats更新许可文件：service serverSpeeder renewLic更新：service serverSpeeder update卸载：service serverSpeeder uninstall]]></content>
      <categories>
        <category>实用技术</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>锐速</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（笑话）将错就错]]></title>
    <url>%2F-%20%E7%AC%91%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[一日午夜，睡梦中突然————“铃~ ~铃” 电话暴响。“谁这么晚还打电话？”揉揉惺忪睡眼，黑暗中，我摸起电话。“喂，谁呀？”“大舅，是我。”“哦，是你呀，外甥。”“大舅，你身体还好吗？”“挺好的。”“我舅妈身体好吗？”“都挺好的。”“咦？大舅，你的声音怎么变了？”“因为你打错电话了，外甥。”对方愣了5秒，然后电话中传来“嘟~ 嘟 ~” 的忙音。]]></content>
      <tags>
        <tag>笑话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《目送》——忧郁]]></title>
    <url>%2F%E5%BF%A7%E9%83%81%2F</url>
    <content type="text"><![CDATA[我冲到阳台，凝神看海面，希望看见那“状如雀鹞，而色惨黑”的苦主。可是海上一片风云动摇，光影迷离，任我怎么定情专注，都看不见杜鹃的踪迹。]]></content>
      <tags>
        <tag>文摘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建flarum论坛]]></title>
    <url>%2F%E6%90%AD%E5%BB%BAflarum%E8%AE%BA%E5%9D%9B%2F</url>
    <content type="text"><![CDATA[本篇文章将介绍如何安装Flarum论坛。我的环境：Ubuntu 16.04.2 x64php7 依次安装apache2、php、mysql-server、php-mysql 1234sudo apt-get install apache2sudo apt-get install php(ubunut14用apt-get install php5)sudo apt-get install mysql-serversudo apt-get install php-mysql(ubunut14用php5-mysql) 下载Flarum中文版1wget http://oyy9gorf8.bkt.clouddn.com/Flarum.zip 安装unzip1sudo apt-get install unzip 将Flarum解压1sudo unzip Flarum.zip 将Flarum文件夹移动到/var/www下面1sudo mv Flarum /var/www 添加权限1sudo chmod -R 777 /var/www/Flarum 开启rewrite12cd /etc/apache2/mods-enabledsudo ln -s ../mods-available/rewrite.load 重定向1sudo vi /etc/apache2/sites-available/000-default.conf 找到DocumentRoot /var/www/html 其中/var/www/html 就是你的网站根目录 把/var/www/html 改为 /var/www/Flarum 并在该文件中的VirtualHost节点之间添加如下代码:123&lt;Directory /var/www/Flarum&gt;AllowOverride All&lt;/Directory&gt; 编辑apache21vi /etc/apache2/apache2.conf 找到12345&lt;Directory /&gt;Options FollowSymLinksAllowOverride NoneRequire all denied&lt;/Directory&gt; 将将AllowOverride None改为AllowOverride All ，Require all denied改为Require all granted. ###创建数据库1mysql -u root -p 输入密码，然后创建一个名为Flarum的数据库1create database Flarum; 输入exit退出数据库 重启apache212sudo service /etc/init.d/apache2 restartubuntu14执行：service apache2 restart 如果在重启apache2出现以下错误1234567 sudo service apache2 restart * Restarting web server apache2 [fail] * The apache2 configtest failed.Output of config test was:apache2: Syntax error on line 140 of /etc/apache2/apache2.conf: Could not open configuration file /etc/apache2/mods-enabled/rewrite.load: No such file or directoryAction &apos;configtest&apos; failed.The Apache error log may have more information. 执行加载Rewrite模块：1a2enmod rewrite 在浏览器输入IP地址，可以看到，遇到了三个问题 解决办法： 第一个问题1sudo apt-get install php-xml 第二个问题1sudo apt-get install php-gd 第三个问题1sudo apt-get install php-mbstring 有的是只有第二个问题The PHP extension ‘gd’ is required.则输入1sudo apt-get install php-gd ubuntu14则执行1sudo apt-get install php5-gd 重启apache1sudo service /etc/init.d/apache2 restart 打开浏览器输入ip地址就能正常安装啦 如果要绑定域名，要修改Flarum目录下的config.php1sudo vi /var/www/Flarum/config.php 找到 ‘url’ =&gt; ‘http://？？？？？‘ 改成1&apos;url&apos; =&gt; &apos;//&apos; . $_SERVER[&apos;HTTP_HOST&apos;], 执行命令php flarum cache:clear &amp;&amp; rm -f assets/rev-manifest.json 主机优惠链接]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>论坛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android之AsyncTask]]></title>
    <url>%2F-%20android%E4%B9%8BAsyncTask%2F</url>
    <content type="text"><![CDATA[使用AsyncTask异步加载图片为了方便在子线程中对UI进行操作，Android提供了一些好用的工具类，AsyncTask就是其中之一。借助AsyncTAsk，可以十分简单的从子线程切换到主线程，它的原理也是基于异步消息处理机制的。 AsyncTask是一个抽象类，因此使用它必须创建一个类去继承它。123class MyAsyncTask extends AsyncTask&lt;Void,Integer,Bitmap&gt; &#123; ...&#125; 第一个参数在执行AsyncTask时需要传入的参数,如果是Void类型，表示在执行AsyncTask时，不需要传递参数给后台 MainActivity123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135package com.teenyda.asynctask;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.AsyncTask;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ProgressBar;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;public class MainActivity extends AppCompatActivity &#123; private Button btnLoadImage; private ImageView imageView; private ProgressBar progressBar; private EditText etUrl; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); btnLoadImage = (Button) findViewById(R.id.btn_load); imageView = (ImageView) findViewById(R.id.imageView); progressBar = (ProgressBar) findViewById(R.id.progressBar); etUrl = (EditText) findViewById(R.id.et_url); imageView.setVisibility(View.GONE); progressBar.setVisibility(View.GONE); &#125; public void loadImage(View view) &#123; String url = etUrl.getText().toString(); if (!url.isEmpty()) &#123; new LoadImageTask().execute(url); &#125; &#125; public void clear(View v) &#123; imageView.setVisibility(View.GONE); etUrl.setText(&quot;&quot;); etUrl.setVisibility(View.VISIBLE); &#125; class LoadImageTask extends AsyncTask&lt;String,Integer,Bitmap&gt;&#123; // 是否设置了进度的最大值 private boolean setProgressMax = false; /** * 在执行之前调用,一般用于初始化界面 */ @Override protected void onPreExecute() &#123; super.onPreExecute(); //显示进度条 progressBar.setVisibility(View.VISIBLE); //隐藏输入框 etUrl.setVisibility(View.GONE); &#125; /** * 在子线程中运行，用于处理耗时操作 * @param params * @return */ @Override protected Bitmap doInBackground(String... params) &#123; HttpURLConnection conn = null; Bitmap bitmap = null; try &#123; conn = (HttpURLConnection) new URL(params[0]).openConnection(); int responseCode = conn.getResponseCode(); if (responseCode == HttpURLConnection.HTTP_OK) &#123; int max = conn.getContentLength(); publishProgress(max); InputStream is = conn.getInputStream(); ByteArrayOutputStream bos = new ByteArrayOutputStream(); int len = 0; int total = 0; byte[] buff = new byte[1024]; while ((len = is.read(buff)) != -1) &#123; bos.write(buff,0,len); total+=len; // 更新进度条 publishProgress(total); &#125; bitmap = BitmapFactory.decodeByteArray(bos.toByteArray(), 0, bos.size()); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; &#125; return bitmap; &#125; /** * 在doInBackground()方法中调用了publishProgress()方法，这个方法就会被调用 * 方法中携带的参数就是后台任务中传递过来的 * 这个方法可以对UI进行操作 * @param values */ @Override protected void onProgressUpdate(Integer... values) &#123; super.onProgressUpdate(values); if (setProgressMax) &#123; progressBar.setProgress(values[0]); &#125; else &#123; progressBar.setMax(values[0]); setProgressMax = true; &#125; &#125; /** * doInBackground执行完毕，这个方法就会被调用,doInBackground()返回的参数也会传递到该方法中 * @param bitmap */ @Override protected void onPostExecute(Bitmap bitmap) &#123; super.onPostExecute(bitmap); if (bitmap != null) &#123; imageView.setImageBitmap(bitmap); imageView.setVisibility(View.VISIBLE); progressBar.setVisibility(View.GONE); &#125; &#125; &#125;&#125; 布局123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.teenyda.asynctask.MainActivity&quot;&gt; &lt;Button android:id=&quot;@+id/btn_load&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;加载图片&quot; android:onClick=&quot;loadImage&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; android:layout_marginBottom=&quot;100dp&quot; android:layout_marginStart=&quot;8dp&quot; android:layout_marginEnd=&quot;8dp&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; android:layout_marginTop=&quot;16dp&quot; android:layout_marginStart=&quot;8dp&quot; android:layout_marginEnd=&quot;8dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/progressBar&quot; style=&quot;?android:attr/progressBarStyleHorizontal&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginBottom=&quot;144dp&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/btn_load&quot; android:layout_marginStart=&quot;8dp&quot; android:layout_marginEnd=&quot;8dp&quot; /&gt; &lt;EditText android:id=&quot;@+id/et_url&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:ems=&quot;10&quot; android:inputType=&quot;textPersonName&quot; android:hint=&quot;图片地址&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; android:layout_marginTop=&quot;16dp&quot; app:layout_constraintHorizontal_bias=&quot;0.503&quot; android:layout_marginStart=&quot;8dp&quot; android:layout_marginEnd=&quot;8dp&quot; /&gt; &lt;Button android:id=&quot;@+id/button2&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;清除&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; android:layout_marginTop=&quot;8dp&quot; android:onClick=&quot;clear&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/btn_load&quot; android:layout_marginStart=&quot;8dp&quot; android:layout_marginEnd=&quot;8dp&quot; /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; 添加网络权限1&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android之handler]]></title>
    <url>%2F-%20android%E4%B9%8BHandler%2F</url>
    <content type="text"><![CDATA[使用Handler异步加载图片Android4.0以后不能在UI线程访问网络，子线程也不能更新UI界面。为了根据下载进度实时更新UI界面，就需要用到Handler消息机制来实现线程间的通信. MainActivity:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150package com.teenyda.handler;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Handler;import android.os.Message;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.Toast;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;/** * ByteArrayOutputStream和BufferedOutputStream * 二者的共同点是：都是为了缓存数据的输出，提高数据输出的效率； 而二者的区别是：ByteArrayOutputStream是将数据全部缓存到自身，然后一次性输出； 而BufferedOutputStream是缓存一部分后，一次一次的输出。 */public class MainActivity extends AppCompatActivity &#123; private Button btnLoadImage; private ImageView imageView; private ProgressBar progressBar; private EditText etUrl; // 更新进度条 private static final int Refresh_The_Schedule = 9527; // 更新视图 private static final int RefreshView = 9528; // 网络错误 private static final int NetworkError = -1; // 加载完成 private static final int LoadingCompleted = 9529; private Handler handler = new Handler()&#123; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case Refresh_The_Schedule: progressBar.setProgress((Integer) msg.obj); break; case RefreshView: // 隐藏输入框 etUrl.setVisibility(View.GONE); // 设置进度条最大值 progressBar.setMax((Integer) msg.obj); // 显示进度条 progressBar.setVisibility(View.VISIBLE); break; case NetworkError: Toast.makeText(getApplicationContext(),msg.obj+&quot;&quot;,Toast.LENGTH_SHORT).show(); break; case LoadingCompleted: // 加载完成 imageView.setImageBitmap((Bitmap) msg.obj); imageView.setVisibility(View.VISIBLE); // 隐藏进度条 progressBar.setVisibility(View.GONE); break; &#125; &#125; &#125;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); btnLoadImage = (Button) findViewById(R.id.btn_load); imageView = (ImageView) findViewById(R.id.imageView); progressBar = (ProgressBar) findViewById(R.id.progressBar); etUrl = (EditText) findViewById(R.id.et_url); // 隐藏图片 imageView.setVisibility(View.GONE); // 隐藏进度条 progressBar.setVisibility(View.GONE); &#125; public void loadImage(View v) &#123; final String imageUrl = etUrl.getText().toString().trim(); if (imageUrl.isEmpty()) &#123; Toast.makeText(getApplicationContext(), &quot;请输入地址&quot;, Toast.LENGTH_SHORT).show(); &#125; new Thread(new Runnable() &#123; @Override public void run() &#123; HttpURLConnection conn = null; try &#123; URL url = new URL(imageUrl); conn = (HttpURLConnection) url.openConnection(); conn.setRequestMethod(&quot;GET&quot;); conn.setConnectTimeout(5000); int responseCode = conn.getResponseCode(); if (responseCode == HttpURLConnection.HTTP_OK) &#123; // 隐藏输入框 // 设置进度条最大值 int contentLength = conn.getContentLength(); updateMsg(RefreshView, contentLength); // 获取输入流 InputStream is = conn.getInputStream(); // 将数据全部缓存到自身 ByteArrayOutputStream bos = new ByteArrayOutputStream(); byte[] buff = new byte[1024]; int len = 0; int totalProgress = 0;//下载的进度 while ((len = is.read(buff)) != -1) &#123; totalProgress += len; // 把数据写入到ByteArrayOutputStream bos.write(buff, 0, len); // 更新进度 updateMsg(Refresh_The_Schedule,totalProgress); &#125; Bitmap bitmap = BitmapFactory.decodeByteArray(bos.toByteArray(), 0, bos.size()); // 加载完成,更新图片 updateMsg(LoadingCompleted,bitmap); &#125; else &#123; updateMsg(NetworkError,&quot;网络请求出错&quot;); &#125; &#125; catch (MalformedURLException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;).start(); &#125; public void clear(View v) &#123; etUrl.setVisibility(View.VISIBLE); etUrl.setText(&quot;&quot;); imageView.setVisibility(View.GONE); progressBar.setVisibility(View.GONE); &#125; private void updateMsg(int code, Object obj) &#123; Message msg = new Message(); msg.what = code; msg.obj = obj; handler.sendMessage(msg); &#125;&#125; 布局文件:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.teenyda.handler.MainActivity&quot;&gt; &lt;Button android:id=&quot;@+id/btn_load&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;加载图片&quot; android:onClick=&quot;loadImage&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; android:layout_marginBottom=&quot;100dp&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; android:layout_marginTop=&quot;16dp&quot; /&gt; &lt;ProgressBar android:id=&quot;@+id/progressBar&quot; style=&quot;?android:attr/progressBarStyleHorizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginBottom=&quot;144dp&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/btn_load&quot; /&gt; &lt;EditText android:id=&quot;@+id/et_url&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:ems=&quot;10&quot; android:inputType=&quot;textPersonName&quot; android:hint=&quot;图片地址&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; android:layout_marginTop=&quot;16dp&quot; app:layout_constraintHorizontal_bias=&quot;0.503&quot; /&gt; &lt;Button android:id=&quot;@+id/button2&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;清除&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; android:layout_marginRight=&quot;8dp&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; android:layout_marginTop=&quot;8dp&quot; android:onClick=&quot;clear&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/btn_load&quot; /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; 清单文件添加网络权限:1&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客常用链接]]></title>
    <url>%2F-%20vps%2F</url>
    <content type="text"><![CDATA[服务类七牛云 七牛云是国内领先的企业级云服务商，专注于以数据管理为中心的云计算业务研发和运营，围绕富媒体场景推出了对象存储、融合 CDN 加速、容器计算云、大数据平台、人工智能平台等产品，并提供一站式视频云解决方案。 algolia Algolia是一个强大的托管搜索引擎API，为产品团队提供了创建快速相关搜索所需的资源和工具。 swiftype 搜索引擎 fontawesome fontawesome中文网 Font Awesome 字体为您提供可缩放矢量图标,它可以被定制大小、颜色、阴影以及任何可以用CSS的样式。支持Markdown! vpsraksmart RakSmart数据中心位于美国加州，中国访问速度快，稳定性好，其冗余性能确保了RakSmart国外服务器正常在线时间和快速的访问。 ping值 hostdare 服务器便宜，最低2.99刀，配置不错，而且还可以微信支付 ping值 somagu 一家韩国的服务器！按小时计费，一个月2.59刀]]></content>
      <categories>
        <category>实用技术</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2Fvpn%2F</url>
    <content type="text"><![CDATA[这是一篇测试文章代码演示 1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 这是一个访问记录地球仪Loading… 下面是各个配置代码 下载1&lt;a id=&quot;download&quot; href=&quot;http://oyy9gorf8.bkt.clouddn.com/about_1.jpeg&quot;&gt;下载&lt;/a&gt; 颜色块-蓝1&lt;span id=&quot;inline-blue&quot;&gt;颜色块-蓝&lt;/span&gt; 颜色块-紫1&lt;span id=&quot;inline-purple&quot;&gt;颜色块-紫&lt;/span&gt; 左侧边框黄色块级1&lt;p id=&quot;div-border-left-yellow&quot;&gt;左侧边框黄色块级&lt;/p&gt; 左侧边框绿色块级1&lt;p id=&quot;div-border-left-green&quot;&gt;左侧边框绿色块级&lt;/p&gt; 左侧边框蓝色块级1&lt;p id=&quot;div-border-left-blue&quot;&gt;左侧边框蓝色块级&lt;/p&gt; 左侧边框紫色块级1&lt;p id=&quot;div-border-left-purple&quot;&gt;左侧边框紫色块级&lt;/p&gt; 右侧边框红色块级1&lt;p id=&quot;div-border-right-red&quot;&gt;右侧边框红色块级&lt;/p&gt; 右侧边框黄色块级1&lt;p id=&quot;div-border-right-yellow&quot;&gt;右侧边框黄色块级&lt;/p&gt; 右侧边框绿色块级1&lt;p id=&quot;div-border-right-green&quot;&gt;右侧边框绿色块级&lt;/p&gt; 右侧边框蓝色块级1&lt;p id=&quot;div-border-right-blue&quot;&gt;右侧边框蓝色块级&lt;/p&gt; 右侧边框紫色块级1&lt;p id=&quot;div-border-right-purple&quot;&gt;右侧边框紫色块级&lt;/p&gt; 上侧边框红色1&lt;p id=&quot;div-border-top-red&quot;&gt;上侧边框红色&lt;/p&gt; 上侧边框黄色1&lt;p id=&quot;div-border-top-yellow&quot;&gt;上侧边框黄色&lt;/p&gt; 上侧边框绿色1&lt;p id=&quot;div-border-top-green&quot;&gt;上侧边框绿色&lt;/p&gt; 上侧边框蓝色1&lt;p id=&quot;div-border-top-blue&quot;&gt;上侧边框蓝色&lt;/p&gt; 上侧边框紫色1&lt;p id=&quot;div-border-top-purple&quot;&gt;上侧边框紫色&lt;/p&gt;]]></content>
  </entry>
</search>
